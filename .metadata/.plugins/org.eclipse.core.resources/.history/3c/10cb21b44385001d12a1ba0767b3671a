package com.rubypaper.board.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.rubypaper.board.domain.Member;
import com.rubypaper.board.domain.Role;
import com.rubypaper.board.persistence.MemberRepository;

@Service
public class MemberServiceImpl implements MemberService {
	@Autowired
	private MemberRepository memberRepo;
	
	@Autowired
	private PasswordEncoder encoder;
	
	public void join(Member member) {
		//회원가입은 모두가 접근 가능해야하기때문에 system 컨트롤러에서 처리
		//아이디 중복 체크
		if (memberRepo.findById(member.getId()).orElse(null) != null) return;
		else {					
			//SecurityController의 joinmem에서 아이디, 비밀번호, 이름 입력받고 비밀번호 암호화, enabled, role을 자동 처리한 뒤 db저장
			member.setPassword(encoder.encode(member.getPassword()));
			member.setEnabled(true);
			member.setRole(Role.ROLE_MEMBER);
			memberRepo.save(member);
		}
	}
	
	public Member info(Member member) {
		Member temmem = memberRepo.findById(member.getId()).get();
		return temmem;
	}
	
	//회원정보 수정(이름, 비밀번호) -> 차후 기존 비밀번호 입력 후 변경 가능하게 수정
	//지금은 입력 정보가 작지만 차후 입력하는 정보가 많아지면 모두 다시 set해서 저장하는게 효율적인지 모르겠다.
	public void updateMember(Member member) {
		Member newMem = memberRepo.findById(member.getId()).get();
		newMem.setPassword(encoder.encode(member.getPassword()));
		newMem.setName(member.getName());
		memberRepo.save(newMem);
	}
	
	public void deleteMember(Member member) {
		memberRepo.deleteById(member.getId());
	}

}
