package com.rubypaper.board.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	//시큐리티 커스터마이징(SecurityFilterChain클래스에서 제공하는 다양한 기능을 가진 필터들을 활용)

	@Autowired
	private SecurityUserDetailsService userDetailsService;
	
	@Autowired
	private AuthenticationFailureHandler customFailureHandler;
	
	// OAuth
	@Autowired
    private CustomOAuth2UserService customOAuth2UserService;

	@Bean
	public SecurityFilterChain sercurityFilterChain(HttpSecurity security) throws Exception {
		
		//사용자가 정의한 UserDetailsService를 사용
		security.userDetailsService(userDetailsService);

		//특정 URL 경로에 권한을 가진 사용자만 접근을 허용
		security.authorizeRequests().antMatchers("/", "/system/**").permitAll();
		security.authorizeRequests().antMatchers("/board/**", "/member/**").authenticated();
		security.authorizeRequests().antMatchers("/admin/**").hasRole("ADMIN");

		//크로스 위조요청 설정 비활성화(REST api 사용하기 위해)
		security.csrf().disable();
		
		//세션 관리
		security.sessionManagement()
				//최대 허용 가능 세션 수
				.maximumSessions(1)
				//최대 허용 세션수인데 추가적인 인증요청이 있을 경우 처리방식
				//true: 현재 사용자 인증 실패
				//false: 기존 세션 만료(default)
				.maxSessionsPreventsLogin(false)
				//세션 만료일 경우 이동할 페이지
				.expiredUrl("/");
		
		//로그인 폼 커스텀
		security.formLogin()
				//사용자 정의 로그인 화면 설정
				.loginPage("/system/login")
				//로그인 성공시 화면 설정
				.defaultSuccessUrl("/board/getBoardList", true)
				//로그인 실패시 처리
				.failureHandler(customFailureHandler);
		
		//accessDenied 페이지 설정
		security.exceptionHandling().accessDeniedPage("/system/accessDenied");
		
		//현제 브라우저와 연관된 세션을 강제종료(로그 아웃)
		security.logout().logoutUrl("/system/logout").invalidateHttpSession(true).logoutSuccessUrl("/");
		
		//OAuth
		security.oauth2Login().defaultSuccessUrl("/board/getBoardList")
        .failureUrl("/").userInfoEndpoint().userService(customOAuth2UserService);
		
		return security.build();
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		//비밀번호 암호화
		return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	}

}


//https://velog.io/@seongwon97/Spring-Security-%EC%84%B8%EC%85%98-%EA%B4%80%EB%A6%AC
//https://wildeveloperetrain.tistory.com/165
//https://wave1994.tistory.com/150   csrf관련